generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER // Adicionado para vendedores/lojistas
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_SLIP
  PAYPAL
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum AddressType {
  HOME
  WORK
  OTHER
}

// Modelo User existente com melhorias
model User {
  id                   String    @id @default(uuid())
  name                 String
  email                String    @unique
  password             String
  refreshToken         String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  role                 Role      @default(USER)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Novos campos de perfil
  avatar          String?
  phone           String?
  birthDate       DateTime?
  cpf             String?   @unique
  isEmailVerified Boolean   @default(false)
  isPhoneVerified Boolean   @default(false)
  lastLoginAt     DateTime?

  // Relacionamentos
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  store         Store?
  notifications Notification[]

  @@map("users")
}

model Store {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  banner      String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento com vendedor
  ownerId String @unique
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Relacionamentos
  products Product[]
  orders   Order[]

  @@map("stores")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  slug        String   @unique
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Hierarquia de categorias
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // Relacionamentos
  products Product[]

  @@map("categories")
}

model Product {
  id             String        @id @default(uuid())
  name           String
  description    String?
  slug           String        @unique
  sku            String?       @unique
  price          Decimal       @db.Decimal(10, 2)
  comparePrice   Decimal?      @db.Decimal(10, 2) // Preço "De:" para promoções
  costPrice      Decimal?      @db.Decimal(10, 2) // Preço de custo
  weight         Decimal?      @db.Decimal(8, 3)
  dimensions     Json? // {height, width, depth}
  status         ProductStatus @default(ACTIVE)
  stock          Int           @default(0)
  minStock       Int           @default(0)
  maxStock       Int?
  isDigital      Boolean       @default(false)
  tags           String[] // Array de tags
  seoTitle       String?
  seoDescription String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relacionamentos
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  images        ProductImage[]
  variants      ProductVariant[]
  reviews       Review[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model ProductImage {
  id     String  @id @default(uuid())
  url    String
  alt    String?
  order  Int     @default(0)
  isMain Boolean @default(false)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(uuid())
  name      String // Ex: "Cor", "Tamanho"
  value     String // Ex: "Azul", "M"
  price     Decimal? @db.Decimal(10, 2) // Preço adicional/diferente
  stock     Int      @default(0)
  sku       String?  @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model Address {
  id           String      @id @default(uuid())
  type         AddressType @default(HOME)
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  country      String      @default("Brasil")
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orders Order[]

  @@map("addresses")
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id           String      @id @default(uuid())
  orderNumber  String      @unique
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @db.Decimal(10, 2)
  shippingCost Decimal     @default(0) @db.Decimal(10, 2)
  discount     Decimal     @default(0) @db.Decimal(10, 2)
  tax          Decimal     @default(0) @db.Decimal(10, 2)
  notes        String?
  trackingCode String?
  shippedAt    DateTime?
  deliveredAt  DateTime?
  cancelledAt  DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relacionamentos
  userId String
  user   User   @relation(fields: [userId], references: [id])

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  addressId String
  address   Address @relation(fields: [addressId], references: [id])

  items    OrderItem[]
  payments Payment[]

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(uuid())
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Payment {
  id              String        @id @default(uuid())
  amount          Decimal       @db.Decimal(10, 2)
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?       @unique
  gatewayResponse Json? // Resposta do gateway de pagamento
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id         String   @id @default(uuid())
  rating     Int // 1 a 5 estrelas
  title      String?
  comment    String?
  isVerified Boolean  @default(false) // Compra verificada
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Um review por usuário por produto
  @@map("reviews")
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String // 'order', 'promotion', 'system', etc.
  isRead    Boolean  @default(false)
  data      Json? // Dados adicionais da notificação
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Modelo para cupons de desconto
model Coupon {
  id            String    @id @default(uuid())
  code          String    @unique
  description   String?
  discountType  String // 'percentage' ou 'fixed'
  discountValue Decimal   @db.Decimal(10, 2)
  minOrderValue Decimal?  @db.Decimal(10, 2)
  maxUses       Int? // Máximo de usos
  usedCount     Int       @default(0)
  isActive      Boolean   @default(true)
  startsAt      DateTime?
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("coupons")
}

// Modelo para banners/slides da homepage
model Banner {
  id          String   @id @default(uuid())
  title       String
  description String?
  image       String
  link        String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("banners")
}
